name: Terraform CI/CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  issue_comment:
    types: [created]

env:
  TF_VERSION: "1.6.0"
  TFLINT_VERSION: "v0.48.0"
  TFSEC_VERSION: "v1.28.4"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      aws-changed: ${{ steps.changes.outputs.aws }}
      gcp-changed: ${{ steps.changes.outputs.gcp }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            aws:
              - 'aws/**'
            gcp:
              - 'gcp/**'

      - name: Set matrix
        id: set-matrix
        run: |
          matrix="[]"
          if [[ "${{ steps.changes.outputs.aws }}" == "true" ]]; then
            matrix=$(echo $matrix | jq '. + [{"cloud": "aws", "path": "aws"}]')
          fi
          if [[ "${{ steps.changes.outputs.gcp }}" == "true" ]]; then
            matrix=$(echo $matrix | jq '. + [{"cloud": "gcp", "path": "gcp"}]')
          fi
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  terraform-check:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Setup tfsec
        run: |
          wget -O tfsec https://github.com/aquasecurity/tfsec/releases/download/${{ env.TFSEC_VERSION }}/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Terraform Format Check
        run: terraform fmt -check -recursive ${{ matrix.path }}/

      - name: TFLint
        run: |
          cd ${{ matrix.path }}
          tflint --init
          tflint --recursive

      - name: tfsec Security Scan
        run: tfsec ${{ matrix.path }}/ --format json --out tfsec-results.json || true

      - name: Upload tfsec results
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-results-${{ matrix.cloud }}
          path: tfsec-results.json

  terraform-plan:
    needs: [detect-changes, terraform-check]
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
        environment: [dev, staging, prod]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        if: matrix.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate to Google Cloud
        if: matrix.cloud == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: |
          cd ${{ matrix.path }}/environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ matrix.path }}/environments/${{ matrix.environment }}
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '${{ matrix.path }}/environments/${{ matrix.environment }}/plan.txt';
            const plan = fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : 'Plan file not found';

            const output = `#### Terraform Plan ðŸ“– \`${{ matrix.cloud }}-${{ matrix.environment }}\`
            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${plan}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply:
    needs: [detect-changes, terraform-check]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
        environment: [dev, staging, prod]
    environment: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        if: matrix.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate to Google Cloud
        if: matrix.cloud == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: |
          cd ${{ matrix.path }}/environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Apply
        run: |
          cd ${{ matrix.path }}/environments/${{ matrix.environment }}
          terraform apply -auto-approve

  comment-commands:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/plan') || contains(github.event.comment.body, '/apply')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Parse command
        id: parse
        run: |
          comment="${{ github.event.comment.body }}"
          if [[ $comment == *"/plan"* ]]; then
            echo "command=plan" >> $GITHUB_OUTPUT
          elif [[ $comment == *"/apply"* ]]; then
            echo "command=apply" >> $GITHUB_OUTPUT
          fi

          # Extract cloud and environment from comment if specified
          cloud=$(echo "$comment" | grep -oP '(?<=cloud=)\w+' || echo "aws")
          env=$(echo "$comment" | grep -oP '(?<=env=)\w+' || echo "dev")
          echo "cloud=$cloud" >> $GITHUB_OUTPUT
          echo "environment=$env" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        if: steps.parse.outputs.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate to Google Cloud
        if: steps.parse.outputs.cloud == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: |
          cd ${{ steps.parse.outputs.cloud }}/environments/${{ steps.parse.outputs.environment }}
          terraform init

      - name: Terraform Command
        id: terraform
        run: |
          cd ${{ steps.parse.outputs.cloud }}/environments/${{ steps.parse.outputs.environment }}
          if [[ "${{ steps.parse.outputs.command }}" == "plan" ]]; then
            terraform plan -no-color > output.txt 2>&1
          elif [[ "${{ steps.parse.outputs.command }}" == "apply" ]]; then
            terraform apply -auto-approve -no-color > output.txt 2>&1
          fi
        continue-on-error: true

      - name: Comment Result
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '${{ steps.parse.outputs.cloud }}/environments/${{ steps.parse.outputs.environment }}/output.txt';
            const output = fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : 'No output generated';

            const result = `#### Terraform ${{ steps.parse.outputs.command }} ðŸš€ \`${{ steps.parse.outputs.cloud }}-${{ steps.parse.outputs.environment }}\`

            <details><summary>Show Output</summary>

            \`\`\`
            ${output}
            \`\`\`

            </details>

            *Triggered by: @${{ github.actor }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result
            }); fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : 'No output generated';

            const result = `#### Terraform ${{ steps.parse.outputs.command }} ðŸš€ \`${{ steps.parse.outputs.cloud }}-${{ steps.parse.outputs.environment }}\`

            <details><summary>Show Output</summary>

            \`\`\`
            ${output}
            \`\`\`

            </details>

            *Triggered by: @${{ github.actor }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result
            });
